#!/usr/bin/env python
"""
xbrain is a tool for predicting non-neural scores of subjects using MRI data
features.

Usage:
    xbrain [options] <database>

Arguments:
    <database>      a .csv file containing MRI data (X) and non-neural data (Y)

Options:
    --timeseries    A comma-seperated list of timeseries .csv (2D) inputs to use as predictors.
    --statmaps      A comma-seperated list of statmap .nii.gz (3D) inputs to use as predictors.
    --predict       Column name in database to predict.
    --roi_mask      A ROI .nii.gz file with the same dimensions as all input statmaps and the same number of non-zero ROIs as there are unique timeseries.
    --pct_template  Proportion (0 < p < 1) of population to serve as the template population for the outer loop [default: 0.1]
    --n             Number of monte-carlo simulations to run for the outer loop [default: 10]
    --p             Proportion (0 < p < 1) of template subjects taken for each outer loop simulation [default: 0.5]
    --k             Number of folds done for the inner loop cross-validation [default: 5]
    --cutoff        Percentile cutoff (0 < p < 0.5) to seperate the low and high y score group [default: 0.5]
    --two-template  Use a two template model: contrast high and low y scores.
    --debug         Verbose outputs.
    --plot          Print out diagnostic plots to the home directory.

DETAILS

The xbrain analysis uses a double-cross validation approach to demonstrate
whether the similarities in neural architecture or activity between a held-out
'template' and independent 'sample' population (X) is predictive of non-neural
variables of interest (Y). For example, demographics (age, sex), cognitive
scores (IQ, TASIT), or clinical variables (medications taken, number of hospital
visits in the last year).

To validate this approach, the members of the template must be shuffled, as well
as the comparison group. These form the outer and inner loop, respectively.

**outer loop: template population**

The template population is first defined as a small proportion of the total
sample (e.g., --pct_template=0.1, or 10 %) with values close to the median non-
neural score of interest. Therefore, the template represents a 'normal'
participant with respect to that variable. For each iteration of the outer loop,
a random subsample (e.g., --p=0.5, or 50%) of the total held-out population
is used to construct a single template to compare with the participants in the
inner loop. This ensures that the results generalize across multiple templates,
and are not template specific. This outer loop is repeated a set number of times
(e.g., --n=10 times).

For each template, the average time-series is calculated across all ROIs to
generate a template set of timeseries.

Due to a 'large' MRI population being in the 100s of subjects, and therefore a
template population can only be assumed to be 10-50 people, monte-carlo
simulations are used instead of K-fold validation.

**inner loop: sample**

The sample population is defined as K distinct folds (e.g., --k=5, or 5 folds)
of the remaining population, because we have more data at our disposal and k-
fold cross validation is more robust to major outliers, which are likely in
heterogenous psychiatric populations. Briefly, K-fold cross validation splits
the population into a test set (n/K) and training set (the remainder). For each
fold, cross-brain correlations are calculated for each individual against the
template, and the training data is used to train a random forest regression
model to predict the non-neural variable of interest. The performance of the
model is evaluated against the test set, and performance measures are averaged
across all folds.

These averaged measures are further averaged across all outer loops to assess
the overall stability of the algorithm.

**features**

The primary feature used is cross-brain correlation of fMRI time series, but
this tool will also accept 3D stat maps (i.e., GLM scores, FA). These can be
combined because for each subject, we collapse the timeseries down to a vector
of cross brain correlation values the same length as the number of ROIs.

In order to do this, a mask with nonzero ROIs must be supplied. The number of
nonzero ROIs must be the same as the number of timeseries supplied. The average
statistic from within each ROI will be taken as the feature for that ROI.

During training and testing, the cross brain correlation values and statistic
vectors will be concatenated. One must be careful not to add too many
features into the model, as this can lead to overfitting and poor
generalizability.

xbrain -h or --help prints this message.
"""
import sys, os
import logging

import numpy as np
import scipy as sp
from scipy.stats import sem
import pandas as pd
from sklearn.cross_validation import KFold
from sklearn.cross_validation import StratifiedKFold

import xbrain.docopt as docopt
import xbrain.utils as utils
import xbrain.correlate as corr
import xbrain.stats as stats

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))

HOME = os.path.expanduser('~')

def main():
    #arguments = docopt(__doc__)
    #database     = arguments['<database>']
    #timeseries   = arguments['--timeseries']
    #statmaps     = arguments['--statmaps']
    #predict      = arguments['--predict']
    #roi_mask     = arguments['--roi_mask']
    #pct_template = float(arguments['--pct_template'])
    #n            = int(arguments['--n'])
    #p            = float(arguments['--p'])
    #k            = int(arguments['--k'])
    #cutoff       = float(arguments['--cutoff'])
    #two_template = arguments['--two-template']
    #debug        = arguments['--debug']
    #plot         = arguments['--plot']

    global HOME

    # for testing
    database = '/projects/jviviano/data/xbrain/assets/database_xbrain.csv'
    timeseries = 'ts_imi'
    statmaps = None
    predict = 'Part1_TotalCorrect'
    roi_mask = None
    pct_template = 0.30
    n = 5
    p = 0.5
    k = 3
    cutoff = 0.2
    two_template = True
    debug = True
    plot = True

    logger.info('starting')
    if debug:
        logger.setLevel(logging.DEBUG)

    logger.debug('checking inputs')
    try:
        db = pd.read_csv(database)
    except:
        logger.error('failed to parse input database {} (must be .csv format)',format(database))
        sys.exit(1)

    # check and format inputs
    columns = []
    if not utils.is_probability(pct_template):
        logger.error('proportion of population to be template invalid: {} (0 < p < 1)'.format(pct_template))
        sys.exit(1)

    if not utils.is_probability(p):
        logger.error('proportion of template population to use for each outer loop invalid: {} (0 < p < 1)'.format(p))
        sys.exit(1)

    if not utils.is_probability(cutoff*2):
        logger.error('group cutoff percentile invalid: {} (0 < p < 0.5)'.format(cutoff))
        sys.exit(1)

    if statmaps:
        statmaps = statmaps.split(',')
        if not utils.is_column(db, statmaps):
            logger.error('not all statmap columns {} defined in {}'.format(statmaps, database))
            sys.exit(1)
        columns.extend(statmaps)

    if timeseries:
        timeseries = timeseries.split(',')
        if not utils.is_column(db, timeseries):
            logger.error('not all timeseries columns {} defined in {}'.format(timeseries, database))
            sys.exit(1)
        columns.extend(timeseries)

    if not utils.is_column(db, predict):
        logger.error('prediction column {} not defined in {}'.format(predict, database))
        sys.exit(1)
    columns.append(predict)

    # reducing data to defined columns
    logger.debug('all columns in submitted database:\n{}'.format(db.columns))
    db = db[columns]
    n_pre = len(db)
    db = db.dropna(axis=0)
    logger.debug('reduced columns: {}\nclean rows in database (no NaNs): {}/{}'.format(columns, len(db), n_pre))

    # pre-test: use MDMR to detect relationship between cognitive variables and
    # brain data. Cluster brain data, and show the mean cognitive score in each
    # cluster. Good v scores are ~ 0.1, or 10%.
    #logger.debug('pre-test: detecting gross relationship between neural and cognitive data')
    #ts = corr.get_template_ts(db, timeseries)
    #X = corr.calc_xbrain(ts, db, timeseries, plot=False)
    #y = utils.gather_dv(db, predict)
    #F, F_null, v = stats.mdmr(y.T, X)
    #thresholds = stats.sig_cutoffs(F_null, two_sided=False)

    #if F > thresholds[1]:
    #    logger.info('pre-test: relationship detected: F={} > {}, variance explained={}'.format(F, thresholds[1], v))
    #else:
    #    logger.warn('pre-test: no relationship detected, variance explained={}'.format(v))

    #if plot:
    #    clst = stats.cluster(X, y, plot=HOME)

    logger.debug('generating dependent variable vector y')
    y = utils.gather_dv(db, predict, cutoff=cutoff)

    r_train, r_test, R2_train, R2_test, MSE_train, MSE_test, pred_scores, real_scores = [], [], [], [], [], [], [], []

    # stratified k-fold cross validation: split into train and test sets
    y_labels = stats.make_classes(y)
    logger.debug('stratified kfold cross-validation')
    kf = StratifiedKFold(y_labels, n_folds=k)
    #logger.debug('kfold cross-validation')
    #kf = KFold(len(y), n_folds=kfold)

    logger.debug('Outer Loop: {} fold cross validation'.format(k))
    for train_idx, test_idx in kf:

        # split database into test and train groups
        test_db = db.iloc[test_idx]
        train_db = db.iloc[train_idx]

        # extract a set of template subjects from the train sample
        n_template = np.round(train_db.shape[0] * pct_template)
        if two_template:
            logger.info('two template analysis ({}th percentile, {}th percentile)'.format(cutoff, 1-cutoff))
            template_db = utils.find_template(train_db, np.ceil(n_template/2), predict, percentile=cutoff*100)
            template_db_low = utils.find_template(train_db, np.ceil(n_template/2), predict, percentile=(1-cutoff)*100)
        else:
            logger.info('one template analysis ({}th percentile)'.format(cutoff))
            template_db = utils.find_template(train_db, n_template, predict, percentile=cutoff*100)

        logger.debug('n template: {}/{}'.format(len(template_db), len(train_db)))
        n_per_template = np.round(len(template_db)*p)

        # monte carlo permutation: take random subsets of the template
        for i in range(n):
            logger.debug('Inner Loop: template permutation {}/{}'.format(i+1, n+1))
            idx = np.sort(np.random.permutation(np.arange(len(template_db)))[:n_per_template])

            logger.debug('calculating xbrain correlations with template')
            ts = corr.get_template_ts(template_db.iloc[idx], timeseries)

            try:
                X_train = corr.calc_xbrain(ts, train_db, timeseries, plot=plot)
                X_test = corr.calc_xbrain(ts, test_db, timeseries, plot=plot)
            except Exception as e:
                logger.error(e)
                sys.exit(1)

            if two_template:
                logger.debug('calculating difference of high and low templates')
                ts_low = corr.get_template_ts(template_db_low.iloc[idx], timeseries)

                try:
                    X_train_low = corr.calc_xbrain(ts_low, train_db, timeseries, plot=plot)
                    X_test_low = corr.calc_xbrain(ts_low, test_db, timeseries, plot=plot)
                except Exception as e:
                    logger.error(e)
                    sys.exit(1)

                    # plot the two feature matricies before taking ratio
                    if plot:
                        corr.plot_features(X_train, HOME, i, X_low=X_train_low)

                X_train = X_train - X_train_low # take difference
                X_test = X_test - X_test_low    #
                X_train[np.isnan(X_train)] = 0  # remove nonsense values
                X_test[np.isnan(X_test)] = 0    #
                X_train[np.isinf(X_train)] = 0  #
                X_test[np.isinf(X_test)] = 0    #
                y_train = utils.gather_dv(train_db, predict, cutoff=cutoff)
                y_test = utils.gather_dv(test_db, predict, cutoff=cutoff)

            if plot:
                corr.plot_features(X_train, HOME, i)

            if plot:
                plotpath = HOME
            else:
                plotpath = None

            try:
                results = stats.classify(X_train, X_test, y_train, y_test, plot=plotpath)
            except Exception as e:
                logger.error(e)
                sys.exit(1)

            # append the results of each iteration (representing a single
            # template permutation for a single fold).
            r_train.append(results['r_train'])
            r_test.append(results['r_test'])
            R2_train.append(results['R2_train'])
            R2_test.append(results['R2_test'])
            MSE_train.append(results['MSE_train'])
            MSE_test.append(results['MSE_test'])

        # print intermediate aggregate stats
        logger.debug('train scores:\n    r   ={:04.2f}+/-{:04.2f}\n    R2  ={:04.2f}+/-{:04.2f}\n    MSE ={:04.2f}+/-{:04.2f}'.format(
            np.mean(r_train), sem(r_train),
            np.mean(R2_train), sem(R2_train),
            np.mean(MSE_train), sem(MSE_train)))

        logger.debug('test scores:\n    r    ={:04.2f}+/-{:04.2f}\n    R2  ={:04.2f}+/-{:04.2f}\n    MSE ={:04.2f}+/-{:04.2f}'.format(
            np.mean(r_test), sem(r_test),
            np.mean(R2_test), sem(R2_test),
            np.mean(MSE_test), sem(MSE_test)))

    # final results
    rmean = np.mean(r_test)
    rsem = sem(r_test)
    r2mean = np.mean(R2_test)
    r2sem = sem(R2_test)
    msemean = np.mean(MSE_test)
    msesem = sem(MSE_test)

    print('Results:\n  rmean={}\n rsem={}\n  r2mean={}\n  r2sem={}\n  MSEmean={}\n  MSEsem={}\n'.format(rmean, rsem, r2mean, r2sem, msemean, msesem))

if __name__ == '__main__':
    main()

