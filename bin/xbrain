#!/usr/bin/env python
"""
xbrain is a tool for predicting non-neural scores of subjects using MRI data
features.

Usage:
    xbrain [options] <database>

Arguments:
    <database>      a .csv file containing MRI data (X) and non-neural data (Y)

Options:
    --timeseries    A comma-seperated list of timeseries .csv (2D) inputs to use as predictors.
    --statmaps      A comma-seperated list of statmap .nii.gz (3D) inputs to use as predictors.
    --predict       Column name in database to predict.
    --roi_mask      A ROI .nii.gz file with the same dimensions as all input statmaps and the same number of non-zero ROIs as there are unique timeseries.
    --pct_template  Proportion (0 < p < 1) of population to serve as the template population for the outer loop [default: 0.1]
    --n             Number of monte-carlo simulations to run for the outer loop [default: 10]
    --p             Proportion (0 < p < 1) of template subjects taken for each outer loop simulation [default: 0.5]
    --k             Number of folds done for the inner loop cross-validation [default: 5]
    --two-template  Use a two template model, one template for subjects with high y scores, and one with low y scores.
    --debug         Verbose outputs.
    --plot          Print out diagnostic plots in .svg format to the current directory.

DETAILS

The xbrain analysis uses a double-cross validation approach to demonstrate
whether the similarities in neural architecture or activity between a held-out
'template' and independent 'sample' population (X) is predictive of non-neural
variables of interest (Y). For example, demographics (age, sex), cognitive
scores (IQ, TASIT), or clinical variables (medications taken, number of hospital
visits in the last year).

To validate this approach, the members of the template must be shuffled, as well
as the comparison group. These form the outer and inner loop, respectively.

**outer loop: template population**

The template population is first defined as a small proportion of the total
sample (e.g., --pct_template=0.1, or 10 %) with values close to the median non-
neural score of interest. Therefore, the template represents a 'normal'
participant with respect to that variable. For each iteration of the outer loop,
a random subsample (e.g., --p=0.5, or 50%) of the total held-out population
is used to construct a single template to compare with the participants in the
inner loop. This ensures that the results generalize across multiple templates,
and are not template specific. This outer loop is repeated a set number of times
(e.g., --n=10 times).

For each template, the average time-series is calculated across all ROIs to
generate a template set of timeseries.

Due to a 'large' MRI population being in the 100s of subjects, and therefore a
template population can only be assumed to be 10-50 people, monte-carlo
simulations are used instead of K-fold validation.

**inner loop: sample**

The sample population is defined as K distinct folds (e.g., --k=5, or 5 folds)
of the remaining population, because we have more data at our disposal and k-
fold cross validation is more robust to major outliers, which are likely in
heterogenous psychiatric populations. Briefly, K-fold cross validation splits
the population into a test set (n/K) and training set (the remainder). For each
fold, cross-brain correlations are calculated for each individual against the
template, and the training data is used to train a random forest regression
model to predict the non-neural variable of interest. The performance of the
model is evaluated against the test set, and performance measures are averaged
across all folds.

These averaged measures are further averaged across all outer loops to assess
the overall stability of the algorithm.

**features**

The primary feature used is cross-brain correlation of fMRI time series, but
this tool will also accept 3D stat maps (i.e., GLM scores, FA). These can be
combined because for each subject, we collapse the timeseries down to a vector
of cross brain correlation values the same length as the number of ROIs.

In order to do this, a mask with nonzero ROIs must be supplied. The number of
nonzero ROIs must be the same as the number of timeseries supplied. The average
statistic from within each ROI will be taken as the feature for that ROI.

During training and testing, the cross brain correlation values and statistic
vectors will be concatenated. One must be careful not to add too many
features into the model, as this can lead to overfitting and poor
generalizability.

xbrain -h or --help prints this message.
"""
import sys, os
import logging

import numpy as np
import scipy as sp
import pandas as pd

import xbrain.docopt as docopt
import xbrain.utils as utils
import xbrain.correlate as corr
import xbrain.stats as stats

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))

HOME = os.path.expanduser('~')

def main():
    #arguments = docopt(__doc__)
    #database     = arguments['<database>']
    #timeseries   = arguments['--timeseries']
    #statmaps     = arguments['--statmaps']
    #predict      = arguments['--predict']
    #roi_mask     = arguments['--roi_mask']
    #pct_template = float(arguments['--pct_template'])
    #n            = int(arguments['--n'])
    #p            = float(arguments['--p'])
    #k            = int(arguments['--k'])
    #two_template = arguments['--two-template']
    #debug        = arguments['--debug']
    #plot         = arguments['--plot']

    global HOME

    # for testing
    database = '/projects/jviviano/data/xbrain/assets/database_xbrain.csv'
    timeseries = 'ts_imi'
    statmaps = None
    predict = 'Part1_TotalCorrect'
    roi_mask = None
    pct_template = 0.30
    n = 5
    p = 0.5
    k = 3
    two_template = True
    debug = False
    plot = False

    logger.info('starting')
    if debug:
        logger.setLevel(logging.DEBUG)

    # logging
    logger.debug('checking inputs')
    try:
        db = pd.read_csv(database)
    except:
        logger.error('failed to parse input database {} (must be .csv format)',format(database))
        sys.exit(1)

    # check and format inputs
    columns = []
    if not utils.is_probability(pct_template):
        logger.error('proportion of population to be template invalid: {} (0 < p < 1)'.format(pct_template))
        sys.exit(1)

    if not utils.is_probability(p):
        logger.error('proportion of template population to use for each outer loop invalid: {} (0 < p < 1)'.format(p))
        sys.exit(1)

    if statmaps:
        statmaps = statmaps.split(',')
        if not utils.is_column(db, statmaps):
            logger.error('not all statmap columns {} defined in {}'.format(statmaps, database))
            sys.exit(1)
        columns.extend(statmaps)

    if timeseries:
        timeseries = timeseries.split(',')
        if not utils.is_column(db, timeseries):
            logger.error('not all timeseries columns {} defined in {}'.format(timeseries, database))
            sys.exit(1)
        columns.extend(timeseries)

    if not utils.is_column(db, predict):
        logger.error('prediction column {} not defined in {}'.format(predict, database))
        sys.exit(1)
    columns.append(predict)

    # reducing data to defined columns
    logger.debug('all columns in submitted database:\n{}'.format(db.columns))
    db = db[columns]
    n_pre = len(db)
    db = db.dropna(axis=0)
    logger.debug('reduced columns: {}\nclean rows in database (no NaNs): {}/{}'.format(columns, len(db), n_pre))

    logger.debug('analyzing full sample')
    template_ts = corr.get_template_ts(db, timeseries)
    X = corr.calc_xbrain(template_ts, db, timeseries, plot=False)
    y = utils.gather_dv(db, predict)
    F, F_null, v = stats.mdmr(y.T, X)
    print('variance explained in xcorr by cognitive variables: {}'.format(v))
    thresholds = stats.sig_cutoffs(F_null, two_sided=False)
    if F > thresholds[1]:
        print('F significant, F={} > {}\nvariance explained={}'.format(F, thresholds[1], v))
    else:
        print('WARNING: no relationship detected between subject distance matrix and cogntivie variable\nvariance explained={}'.format(v))

    if plot:
        clst = stats.cluster(X, y, plot=HOME)

    sys.exit()

    n_template = np.round(db.shape[0] * pct_template)
    if two_template:
        logger.debug('two template analysis: splitting sample into template & participant populations')
        logger.debug('finding high template: 80th percentile')
        template_pop, participant_pop = utils.split_samples(db, np.ceil(n_template/2), predict, percentile=80)
        logger.debug('finding low template: 20th percentile')
        template_pop_low, participant_pop = utils.split_samples(participant_pop, np.ceil(n_template/2), predict, percentile=20)
    else:
        logger.debug('one template analysis: splitting sample into template & participant populations')
        logger.debug('finding template: 50th percentile')
        template_pop, participant_pop = utils.split_samples(db, n_template, predict)

    logger.debug('n template_pop: {}, n participant_pop: {}'.format(len(template_pop), len(participant_pop)))
    n_per_template = np.round(len(template_pop)*p)

    logger.debug('generating dependent variable vector y')
    y = utils.gather_dv(participant_pop, predict)

    r_train, r_test, R2_train, R2_test, MSE_train, MSE_test, pred_scores, real_scores = [], [], [], [], [], [], [], []

    # outer loop: take a random subsample (p%) of the template population
    for i in range(n):
        logger.debug('OUTER LOOP: template {}'.format(i+1))
        idx = np.sort(np.random.permutation(np.arange(len(template_pop)))[:n_per_template])
        template = template_pop.iloc[idx]
        if two_template:
            template_low = template_pop_low.iloc[idx]

        logger.debug('generating template timeseries')
        template_ts = corr.get_template_ts(template, timeseries)
        if two_template:
            template_ts_low = corr.get_template_ts(template_low, timeseries)

        logger.debug('calculating population cross-brain correlations with template')
        try:
            X = corr.calc_xbrain(template_ts, participant_pop, timeseries, plot=plot)
            if two_template:
                X_low = corr.calc_xbrain(template_ts_low, participant_pop, timeseries, plot=plot)
        except Exception as e:
            logger.error(e)
            sys.exit(1)

        if two_template:
            logger.debug('two template analysis: taking ratio of features from high and low templates')
            if plot:
                corr.plot_features(X, HOME, i, X_low=X_low)

            X = X - X_low # take difference of high and low score templates
            X[np.isnan(X)] = 0 # remove nonsense values
            X[np.isinf(X)] = 0 # remove nonsense values
        elif plot:
            corr.plot_features(X, HOME, i)

        logger.debug('INNER LOOP: template {}'.format(i+1))
        if plot:
            plotpath = HOME
        else:
            plotpath = None

        try:
            results = stats.classifier(X, y, k, i+1, plot=plotpath)
        except Exception as e:
            logger.error(e)
            sys.exit(1)

        # append inner loop fold results for each iter of outer loop
        r_train.append(results['r_train'])
        r_test.append(results['r_test'])
        R2_train.append(results['R2_train'])
        R2_test.append(results['R2_test'])
        MSE_train.append(results['MSE_train'])
        MSE_test.append(results['MSE_test'])

    rmean = np.mean(r_test)
    rsem = sp.stats.sem(r_test)
    r2mean = np.mean(R2_test)
    r2sem = sp.stats.sem(R2_test)
    msemean = np.mean(MSE_test)
    msesem = sp.stats.sem(MSE_test)

    print('Results:\n  rmean={}\n rsem={}\n  r2mean={}\n  r2sem={}\n  MSEmean={}\n  MSEsem={}\n'.format(rmean, rsem, r2mean, r2sem, msemean, msesem))

if __name__ == '__main__':
    main()

